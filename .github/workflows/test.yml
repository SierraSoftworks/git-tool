name: Test Changes
on:
  push:
    paths-ignore:
      - "docs/**"
env:
  GRCOV_VERSION: 0.8.0

jobs:
  test-platforms:
    name: ${{ matrix.os }}-${{ matrix.arch }}-test
    runs-on: ${{ matrix.run_on }}
    continue-on-error: ${{ matrix.experimental || false }}
    strategy:
      matrix:
        include:
          - arch: amd64
            os: windows
            run_on: windows-latest
            target: x86_64-pc-windows-msvc

          - arch: amd64
            run_on: ubuntu-20.04
            os: linux
            target: x86_64-unknown-linux-gnu
            coverage: true
            setup: |
              sudo apt-get update
              sudo apt-get install -y libdbus-1-3 libdbus-1-dev
          # - arch: "386"
          #   os: linux
          #   run_on: ubuntu-20.04
          #   target: i686-unknown-linux-gnu
          #   experimental: true
          #   skiptests: true
          #   setup: |
          #     sudo apt-get update
          #     sudo apt-get install -y libdbus-1-3 libdbus-1-dev
          - arch: "arm64"
            os: linux
            run_on: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            experimental: true
            skiptests: true
            setup: |
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu lld

              # Ensure that the libgcc
              sudo ln -s /usr/aarch64-linux-gnu/lib/libgcc_s.so.1 /usr/aarch64-linux-gnu/lib/libgcc_s.so
            flags: --no-default-features

          - arch: amd64
            run_on: macos-latest
            os: darwin
            target: x86_64-apple-darwin
          - arch: arm64
            run_on: macos-latest
            os: darwin
            target: aarch64-apple-darwin
            experimental: true
            skiptests: true
            setup: |
              echo "Updating to XCode 12.3 with Apple ARM (M1) support"
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*
              sudo xcode-select -s "/Applications/Xcode_12.3.app"

    steps:
      - name: setup dependencies
        run: ${{ matrix.setup }}
        if: matrix.setup

      - uses: actions/checkout@v2.3.4

      - name: cache ~/.cargo
        uses: Swatinem/rust-cache@v1

      - name: rustup install nightly
        uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: nightly
          profile: minimal
          target: ${{ matrix.target }}
          override: true

      - name: rustup install nightly llvm-tools-preview
        uses: actions-rs/toolchain@v1.0.7
        if: matrix.coverage || false
        with:
          toolchain: nightly
          target: ${{ matrix.target }}
          override: true
          components: llvm-tools-preview

      - name: cargo install grcov
        uses: SierraSoftworks/setup-grcov@v1
        if: matrix.coverage || false
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: git config
        run: |
          git config --global user.name "Test User"
          git config --global user.email "test@example.com"
          git config --global init.defaultBranch "main"

      - name: cargo build
        uses: actions-rs/cargo@v1.0.3
        if: matrix.skiptests
        with:
          command: build
          args: --target ${{ matrix.target }} ${{ matrix.flags }}

      - name: cargo test
        uses: actions-rs/cargo@v1.0.3
        if: "!matrix.skiptests && !matrix.coverage"
        with:
          command: test
          args: --no-fail-fast --target ${{ matrix.target }} ${{ matrix.flags }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: cargo test +coverage
        uses: actions-rs/cargo@v1.0.3
        if: "!matrix.skiptests && matrix.coverage"
        with:
          command: test
          args: --no-fail-fast --target ${{ matrix.target }} ${{ matrix.flags }}
        env:
          RUSTFLAGS: -Zinstrument-coverage
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: grcov
        run: grcov . --binary-path target/${{ matrix.target }}/debug/deps/ -s . -t lcov --ignore-not-existing --ignore '../**' --ignore '/*' --ignore 'C:/' -o ./lcov.info
        if: matrix.coverage || false

      - name: codecov upload
        uses: codecov/codecov-action@v2.0.1
        if: matrix.coverage || false
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./lcov.info

  test-done:
    name: Tests Complete
    needs: test-platforms
    runs-on: ubuntu-20.04
    steps:
      - run: echo "Tests Complete for All Platforms"
